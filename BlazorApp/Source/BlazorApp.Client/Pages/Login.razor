@page "/login"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

<MudText>Don't have an account? <MudLink Href="/register">Sign Up</MudLink></MudText>

<MudTextField T="string" @bind-Value="@loginParameters.UserName" Label="Username" 
    Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@loginParameters.Password" Label="Password" 
    Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" 
    AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick = "OnSubmit"
    Size="Size.Large" FullWidth="true" Class="mt-4">Sign In</MudButton>

@code{
    LoginParameters loginParameters { get; set; } = new LoginParameters();
    string? error { get; set; }
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Login(loginParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}